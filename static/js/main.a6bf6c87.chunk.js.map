{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","props","state","Num","ButtonNum","Class","this","value","to","ButtonName","className","onClick","React","Component","Header","ActiveTab","Tabs","setState","num","isActive","console","log","handleClick","renderPageTop","renderButton","renderPageFooter","Home","Services","Clients","Contact","About","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAcOA,G,wDACL,WAAYC,GACX,IAAD,8BACC,cAAMA,IACDC,MACL,CACCC,IAAM,EAAKF,MAAMG,WAJnB,E,qDAUC,IACIC,EADL,OAGC,OADyBA,EAAL,IAAnBC,KAAKL,MAAMM,MAAqB,eAAyB,SAEzD,kBAAC,IAAD,CAAMC,GAAIF,KAAKL,MAAMQ,WACrBC,UAAaL,EACbM,QAAS,kBAAM,EAAKV,MAAMU,YAF1B,IAEwCL,KAAKL,MAAMQ,gB,GAlBjCG,IAAMC,YAyBpBC,E,kDAEL,WAAYb,GACX,IAAD,8BACC,cAAMA,IACDC,MACL,CACCa,UAAW,EACXC,KAAM,CAAC,OAAQ,WAAY,UAAW,UAAW,UALnD,E,4DAUC,OACC,4BAAQN,UAAU,cAAlB,e,yCAQA,OACC,4BAAQA,UAAU,UAAlB,8B,kCAMSN,GACXE,KAAKW,SAAS,CAACF,UAAWX,M,mCAGdc,GAAM,IAEdC,EAFa,OAOjB,OANAC,QAAQC,IAAI,qBAAqBH,GAEjCC,EAAW,EACoBA,EAA9Bb,KAAKJ,MAAMa,YAAYG,EAAkB,EAAe,EACzDE,QAAQC,IAAI,WAAWH,EAAK,KAAM,GAGjC,kBAAC,EAAD,CACAX,MAAOY,EACPV,WAAYH,KAAKJ,MAAMc,KAAKE,GAC5Bd,UAAWc,EACXP,QAAS,kBAAM,EAAKW,YAAYJ,Q,+BAMhC,OACC,6BACCZ,KAAKiB,gBACN,yBAAKb,UAAU,UACdJ,KAAKkB,aAAa,GAAIlB,KAAKkB,aAAa,GAAIlB,KAAKkB,aAAa,GAAIlB,KAAKkB,aAAa,GAAIlB,KAAKkB,aAAa,GAC1GlB,KAAKmB,yB,GAxDWb,IAAMC,WA8Gfa,GA/CSd,IAAMC,UA+CR,kBACZ,uCAIMc,EAAW,kBAChB,0CAIMC,EAAU,kBACf,yCAIMC,EAAU,kBACf,yCAIMC,EAAQ,kBACb,uCAKMC,EAAO,kBACZ,8BACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,QAAQC,UAAWR,IACrC,kBAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWP,IACnC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,OAchBK,MAThB,WACC,OACC,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCpLIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.a6bf6c87.chunk.js","sourcesContent":["\timport React from 'react';\n\t// import Button from '@material-ui/core/Button';\n\t// import Switch from '@material-ui/core/Switch';\n\t// import logo from './logo.svg';\n\timport {\n\t\tSwitch,\n\t\tRoute,\n\t\tLink\n\t} from 'react-router-dom';\n\timport './App.css';\n\n\n\n\n\tclass Button extends React.Component {\n\t\tconstructor(props)\n\t\t{\n\t\t\tsuper(props);\n\t\t\tthis.state =\n\t\t\t{\n\t\t\t\tNum : this.props.ButtonNum,\n\t\t\t\t// Active: true\n\t\t\t};\n\t\t}\n\n\t\trender()\n\t\t{\n\t\t\tlet Class\n\t\t\t(this.props.value===1) ? Class = \"ButtonActive\" : Class = \"Button\";\n\t\t\treturn (\n\t\t\t\t<Link to={this.props.ButtonName}\n\t\t\t\tclassName = {Class}\n\t\t\t\tonClick={() => this.props.onClick()} > {this.props.ButtonName}\n\t\t\t</Link>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\n\t\tclass Header extends React.Component {\n\n\t\t\tconstructor(props)\n\t\t\t{\n\t\t\t\tsuper(props);\n\t\t\t\tthis.state =\n\t\t\t\t{\n\t\t\t\t\tActiveTab: 0,\n\t\t\t\t\tTabs: [\"Home\", \"Services\", \"Clients\", \"Contact\", \"About\"]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\trenderPageTop(){\n\t\t\t\treturn (\n\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\tlogo here\n\t\t\t\t\t</header>\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\trenderPageFooter()\n\t\t\t\t{\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<footer className=\"footer\">\n\t\t\t\t\t\tSIA TeknoLogic &copy; 2020\n\t\t\t\t\t\t</footer>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\n\t\t\thandleClick(ButtonNum) {\n\t\t\t\tthis.setState({ActiveTab: ButtonNum});\n\t\t\t}\n\n\t\t\trenderButton(num) {\n\t\t\t\tconsole.log(\"Rendering button #\",num)\n\t\t\t\tlet isActive\n\t\t\t\tisActive = 0;\n\t\t\t\t(this.state.ActiveTab===num) ? isActive = 1 : isActive = 0;\n\t\t\t\tconsole.log(\"Button #\",num, \"is\", 0)\n\n\t\t\t\treturn (\n\t\t\t\t\t<Button\n\t\t\t\t\tvalue={isActive}\n\t\t\t\t\tButtonName={this.state.Tabs[num]}\n\t\t\t\t\tButtonNum={num}\n\t\t\t\t\tonClick={() => this.handleClick(num)}\n\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\trender() {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t{this.renderPageTop()}\n\t\t\t\t\t\t<div className=\"topnav\">\n\t\t\t\t\t\t{this.renderButton(0)}{this.renderButton(1)}{this.renderButton(2)}{this.renderButton(3)}{this.renderButton(4)}\n\t\t\t\t\t\t{this.renderPageFooter()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclass Page extends React.Component\n\t\t\t\t{\n\n\n\t\t\t\t\trenderNavbar(items,itemsnum)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<navBar />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderPageContent(ActivePage)\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderPageHeader()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t\t\t\tlogo here\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trenderPageFooter()\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<footer className=\"footer\">\n\t\t\t\t\t\t\t\t\tSIA TeknoLogic &copy; 2020\n\t\t\t\t\t\t\t\t\t</footer>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trender() {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t\t\t\t{this.renderPageHeader()}\n\t\t\t\t\t\t\t\t\t\t{this.renderNavbar(this.state.Tabs)}\n\t\t\t\t\t\t\t\t\t\t{this.renderPageContent(this.state.ActiveTab)}\n\t\t\t\t\t\t\t\t\t\t{this.renderPageFooter()}\n\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst Home = () => (\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\tHome\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\tconst Services = () => (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\tServices\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tconst Clients = () => (\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\tClients\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\tconst Contact = () => (\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\tContact\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\tconst About = () => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAbout\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst Main = () => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<main>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route exact path='/' component={Home}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route exact path='/Home' component={Home}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route path='/Services' component={Services}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route path='/Clients' component={Clients}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route path='/Contact' component={Contact}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Route path='/About' component={About}/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</main>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfunction App() {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Main />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\texport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {HashRouter} from'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}